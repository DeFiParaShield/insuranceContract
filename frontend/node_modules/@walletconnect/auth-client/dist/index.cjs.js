"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var w=require("@walletconnect/core"),_=require("@walletconnect/logger"),H=require("events"),E=require("@walletconnect/jsonrpc-utils"),v=require("@walletconnect/time"),p=require("@walletconnect/utils"),L=require("@ethersproject/hash"),J=require("@ethersproject/transactions"),Y=require("isomorphic-unfetch"),G=require("@stablelib/random");function B(r){return r&&typeof r=="object"&&"default"in r?r:{default:r}}var k=B(Y);class S{constructor(i){this.client=i}}class U{constructor(i){this.opts=i}}const K="https://rpc.walletconnect.com/v1",m={wc_authRequest:{req:{ttl:v.ONE_DAY,prompt:!0,tag:3e3},res:{ttl:v.ONE_DAY,prompt:!1,tag:3001}}},q="wc",x=1,D="auth",A="authClient",R=`${q}@${1}:${D}:`,I=`${R}:PUB_KEY`,Z="expirer",Q={created:"expirer_created",deleted:"expirer_deleted",expired:"expirer_expired",sync:"expirer_sync"},W="0.3",ee=v.ONE_DAY;function C(r){return r?.split(":")}function te(r){const i=r&&C(r);if(i)return i[3]}function ie(r){const i=r&&C(r);if(i)return i[2]+":"+i[3]}function j(r){const i=r&&C(r);if(i)return i.pop()}function $(r){return r.getAll().filter(i=>"requester"in i)}function M(r,i){return $(r).find(e=>e.id===i)}function se(r){const i=p.isValidUrl(r.aud),e=new RegExp(`${r.domain}`).test(r.aud),t=!!r.nonce,s=r.type?r.type==="eip4361":!0;return!!(i&&e&&t&&s)}function re(r,i){return!!M(i,r.id)}async function ne(r,i,e,t,s){switch(e.t){case"eip191":return oe(r,i,e.s);case"eip1271":return await ae(r,i,e.s,t,s);default:throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${e.t}`)}}function oe(r,i,e){return J.recoverAddress(L.hashMessage(i),e).toLowerCase()===r.toLowerCase()}async function ae(r,i,e,t,s){try{const n="0x1626ba7e",o="0000000000000000000000000000000000000000000000000000000000000040",a="0000000000000000000000000000000000000000000000000000000000000041",l=e.substring(2),c=L.hashMessage(i).substring(2),h=n+c+o+a+l,d=await k.default(`${K}/?chainId=${t}&projectId=${s}`,{method:"POST",body:JSON.stringify({id:ce(),jsonrpc:"2.0",method:"eth_call",params:[{to:r,data:h},"latest"]})}),{result:u}=await d.json();return u?u.slice(0,n.length).toLowerCase()===n.toLowerCase():!1}catch(n){return console.error("isValidEip1271Signature: ",n),!1}}function ce(){return Date.now()+Math.floor(Math.random()*1e3)}var le=Object.defineProperty,he=Object.defineProperties,ue=Object.getOwnPropertyDescriptors,X=Object.getOwnPropertySymbols,de=Object.prototype.hasOwnProperty,ge=Object.prototype.propertyIsEnumerable,V=(r,i,e)=>i in r?le(r,i,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[i]=e,b=(r,i)=>{for(var e in i||(i={}))de.call(i,e)&&V(r,e,i[e]);if(X)for(var e of X(i))ge.call(i,e)&&V(r,e,i[e]);return r},pe=(r,i)=>he(r,ue(i));class ye extends S{constructor(i){super(i),this.initialized=!1,this.name="authEngine",this.init=()=>{this.initialized||(this.registerRelayerEvents(),this.client.core.pairing.register({methods:Object.keys(m)}),this.initialized=!0)},this.request=async(e,t)=>{if(this.isInitialized(),!se(e))throw new Error("Invalid request");const{chainId:s,statement:n,aud:o,domain:a,nonce:l,type:c}=e,h=Boolean(t?.topic)&&this.client.core.pairing.pairings.getAll({active:!0}).some(f=>f.topic===t?.topic),d={protocol:w.RELAYER_DEFAULT_PROTOCOL},u=p.calcExpiry(v.FIVE_MINUTES),g=await this.client.core.crypto.generateKeyPair();if(h){const f=this.client.core.pairing.pairings.getAll({active:!0}).find(F=>F.topic===t?.topic);if(!f)throw new Error(`Could not find pairing for provided topic ${t?.topic}`);await this.sendRequest(f.topic,"wc_authRequest",{payloadParams:{type:c??"eip4361",chainId:s,statement:n,aud:o,domain:a,version:"1",nonce:l,iat:new Date().toISOString()},requester:{publicKey:g,metadata:this.client.metadata}}),this.client.logger.debug("sent request to existing pairing")}const P=p.generateRandomBytes32(),y=await this.client.core.crypto.setSymKey(P),O={topic:y,expiry:u,relay:d,active:!1};await this.client.core.pairing.pairings.set(y,O),this.client.logger.debug("Generated new pairing",O),this.setExpiry(y,u),this.client.authKeys.set(I,{publicKey:g});const N=p.hashKey(g);await this.client.pairingTopics.set(N,{pairingTopic:y}),await this.client.core.relayer.subscribe(y),await this.client.core.relayer.subscribe(N),this.client.logger.debug("sending request to potential pairing");const z=await this.sendRequest(y,"wc_authRequest",{payloadParams:{type:c??"eip4361",chainId:s,statement:n,aud:o,domain:a,version:"1",nonce:l,iat:new Date().toISOString()},requester:{publicKey:g,metadata:this.client.metadata}});return this.client.logger.debug("sent request to potential pairing"),{uri:p.formatUri({protocol:this.client.protocol,version:this.client.core.version,topic:y,symKey:P,relay:d}),id:z}},this.respond=async(e,t)=>{if(this.isInitialized(),!re(e,this.client.requests))throw new Error("Invalid response");const s=M(this.client.requests,e.id),n=s.requester.publicKey,o=await this.client.core.crypto.generateKeyPair(),a=p.hashKey(n),l={type:p.TYPE_1,receiverPublicKey:n,senderPublicKey:o};if("error"in e){await this.sendError(s.id,a,e,l);return}const c={h:{t:"eip4361"},p:pe(b({},s.cacaoPayload),{iss:t}),s:e.signature},h=await this.sendResult(s.id,a,c,l);await this.client.requests.set(h,b({id:h},c))},this.getPendingRequests=()=>$(this.client.requests),this.formatMessage=(e,t)=>{this.client.logger.debug("formatMessage, cacao is:",e);const s=`${e.domain} wants you to sign in with your Ethereum account:`,n=j(t),o=e.statement,a=`URI: ${e.aud}`,l=`Version: ${e.version}`,c=`Chain ID: ${te(t)}`,h=`Nonce: ${e.nonce}`,d=`Issued At: ${e.iat}`,u=e.resources&&e.resources.length>0?`Resources:
${e.resources.map(g=>`- ${g}`).join(`
`)}`:void 0;return[s,n,"",o,"",a,l,c,h,d,u].filter(g=>g!=null).join(`
`)},this.setExpiry=async(e,t)=>{this.client.core.pairing.pairings.keys.includes(e)&&await this.client.core.pairing.updateExpiry({topic:e,expiry:t}),this.client.core.expirer.set(e,t)},this.sendRequest=async(e,t,s,n)=>{const o=E.formatJsonRpcRequest(t,s),a=await this.client.core.crypto.encode(e,o,n),l=m[t].req;return this.client.core.history.set(e,o),await this.client.core.relayer.publish(e,a,l),o.id},this.sendResult=async(e,t,s,n)=>{const o=E.formatJsonRpcResult(e,s),a=await this.client.core.crypto.encode(t,o,n),l=await this.client.core.history.get(t,e),c=m[l.request.method].res;return await this.client.core.relayer.publish(t,a,c),await this.client.core.history.resolve(o),o.id},this.sendError=async(e,t,s,n)=>{const o=E.formatJsonRpcError(e,s.error),a=await this.client.core.crypto.encode(t,o,n),l=await this.client.core.history.get(t,e),c=m[l.request.method].res;return await this.client.core.relayer.publish(t,a,c),await this.client.core.history.resolve(o),o.id},this.onRelayEventRequest=e=>{const{topic:t,payload:s}=e,n=s.method;switch(n){case"wc_authRequest":return this.onAuthRequest(t,s);default:return this.client.logger.info(`Unsupported request method ${n}`)}},this.onRelayEventResponse=async e=>{const{topic:t,payload:s}=e,n=(await this.client.core.history.get(t,s.id)).request.method;switch(n){case"wc_authRequest":return this.onAuthResponse(t,s);default:return this.client.logger.info(`Unsupported response method ${n}`)}},this.onAuthRequest=async(e,t)=>{const{requester:s,payloadParams:{resources:n,statement:o,aud:a,domain:l,version:c,nonce:h,iat:d}}=t.params;this.client.logger.debug("onAuthRequest:",e,t);try{const u={aud:a,domain:l,version:c,nonce:h,iat:d,statement:o,resources:n};await this.client.requests.set(t.id,{requester:s,id:t.id,cacaoPayload:u}),this.client.emit("auth_request",{id:t.id,topic:e,params:{requester:s,cacaoPayload:u}})}catch(u){await this.sendError(t.id,e,u),this.client.logger.error(u)}},this.onAuthResponse=async(e,t)=>{const{id:s}=t;if(this.client.logger.debug("onAuthResponse",e,t),E.isJsonRpcResult(t)){const{pairingTopic:n}=this.client.pairingTopics.get(e);await this.client.core.pairing.activate({topic:n});const{s:o,p:a}=t.result;await this.client.requests.set(s,b({id:s},t.result));const l=this.formatMessage(a,a.iss);this.client.logger.debug(`reconstructed message:
`,JSON.stringify(l)),this.client.logger.debug("payload.iss:",a.iss),this.client.logger.debug("signature:",o);const c=j(a.iss),h=ie(a.iss);if(!c)throw new Error("Could not derive address from `payload.iss`");if(!h)throw new Error("Could not derive chainId from `payload.iss`");this.client.logger.debug("walletAddress extracted from `payload.iss`:",c),await ne(c,l,o,h,this.client.projectId)?this.client.emit("auth_response",{id:s,topic:e,params:t}):this.client.emit("auth_response",{id:s,topic:e,params:{message:"Invalid signature",code:-1}})}else E.isJsonRpcError(t)&&this.client.emit("auth_response",{id:s,topic:e,params:t})}}isInitialized(){if(!this.initialized){const{message:i}=p.getInternalError("NOT_INITIALIZED",this.name);throw new Error(i)}}registerRelayerEvents(){this.client.core.relayer.on(w.RELAYER_EVENTS.message,async i=>{const{topic:e,message:t}=i,s=this.client.authKeys.keys.includes(I)?this.client.authKeys.get(I).publicKey:"",n=s?{receiverPublicKey:s}:{},o=await this.client.core.crypto.decode(e,t,n);E.isJsonRpcRequest(o)?(this.client.core.history.set(e,o),this.onRelayEventRequest({topic:e,payload:o})):E.isJsonRpcResponse(o)&&(await this.client.core.history.resolve(o),this.onRelayEventResponse({topic:e,payload:o}))})}}class T extends U{constructor(i){super(i),this.protocol=q,this.version=x,this.name=A,this.events=new H.EventEmitter,this.emit=(t,s)=>this.events.emit(t,s),this.on=(t,s)=>this.events.on(t,s),this.once=(t,s)=>this.events.once(t,s),this.off=(t,s)=>this.events.off(t,s),this.removeListener=(t,s)=>this.events.removeListener(t,s),this.request=async(t,s)=>{try{return await this.engine.request(t,s)}catch(n){throw this.logger.error(n.message),n}},this.respond=async(t,s)=>{try{return await this.engine.respond(t,s)}catch(n){throw this.logger.error(n.message),n}},this.getPendingRequests=()=>{try{return this.engine.getPendingRequests()}catch(t){throw this.logger.error(t.message),t}},this.formatMessage=(t,s)=>{try{return this.engine.formatMessage(t,s)}catch(n){throw this.logger.error(n.message),n}};const e=typeof i.logger<"u"&&typeof i.logger!="string"?i.logger:_.pino(_.getDefaultLoggerOptions({level:i.logger||"error"}));this.name=i?.name||A,this.metadata=i.metadata,this.projectId=i.projectId,this.core=i.core||new w.Core(i),this.logger=_.generateChildLogger(e,this.name),this.authKeys=new w.Store(this.core,this.logger,"authKeys",R),this.pairingTopics=new w.Store(this.core,this.logger,"pairingTopics",R),this.requests=new w.Store(this.core,this.logger,"requests",R),this.engine=new ye(this)}static async init(i){const e=new T(i);return await e.initialize(),e}get context(){return _.getLoggerContext(this.logger)}async initialize(){this.logger.trace("Initialized");try{await this.core.start(),await this.authKeys.init(),await this.requests.init(),await this.pairingTopics.init(),await this.engine.init(),this.logger.info("AuthClient Initialization Success")}catch(i){throw this.logger.info("AuthClient Initialization Failure"),this.logger.error(i.message),i}}}function Ee(){return G.randomStringForEntropy(96)}const we=T;exports.AUTH_CLIENT_CONTEXT=D,exports.AUTH_CLIENT_DEFAULT_NAME=A,exports.AUTH_CLIENT_PROTOCOL=q,exports.AUTH_CLIENT_PUBLIC_KEY_NAME=I,exports.AUTH_CLIENT_STORAGE_PREFIX=R,exports.AUTH_CLIENT_VERSION=x,exports.AuthClient=we,exports.DEFAULT_RPC_URL=K,exports.ENGINE_RPC_OPTS=m,exports.EXPIRER_CONTEXT=Z,exports.EXPIRER_DEFAULT_TTL=ee,exports.EXPIRER_EVENTS=Q,exports.EXPIRER_STORAGE_VERSION=W,exports.IAuthClient=U,exports.IAuthEngine=S,exports.default=T,exports.generateNonce=Ee;
//# sourceMappingURL=index.cjs.js.map
