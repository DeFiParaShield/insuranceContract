"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientSolana = void 0;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const isomorphic_ws_1 = __importDefault(require("isomorphic-ws"));
const ClientMessages_1 = require("../types/ClientMessages");
const ServerMessage_1 = require("../types/ServerMessage");
const utils_1 = require("../utils");
class ClientSolana extends eventemitter3_1.default {
    constructor(ws, sessionId) {
        super();
        this.events = {};
        this.sessionId = '';
        this.connect = ({ publicKey, sessionId, token, metadata }) => __awaiter(this, void 0, void 0, function* () {
            const request = (0, ClientMessages_1.createConnectMessage)(publicKey.toBuffer().toString('hex'), sessionId, token, metadata);
            yield this.send(request);
        });
        this.getPendingRequests = () => __awaiter(this, void 0, void 0, function* () {
            const request = {
                type: ClientMessages_1.ClientMessageTypes.GetPendingRequests,
                sessionId: this.sessionId
            };
            return (yield this.send(request));
        });
        this.send = (message) => __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const id = (0, utils_1.getRandomId)();
                const request = JSON.stringify(Object.assign(Object.assign({}, message), { id: id }));
                this.events[id] = (response) => {
                    if (response.type === ServerMessage_1.ServerMessageTypes.Error) {
                        reject(response.msg);
                    }
                    else {
                        resolve(response);
                    }
                };
                this.ws.send(request);
            });
        });
        this.resolveSignTransaction = ({ requestId, signedTransactions }) => __awaiter(this, void 0, void 0, function* () {
            const buffers = signedTransactions.map((tx) => Buffer.from(tx.serialize({ requireAllSignatures: false, verifySignatures: false })).toString('hex'));
            const request = {
                type: ClientMessages_1.ClientMessageTypes.ResolveSignTransaction,
                sessionId: this.sessionId,
                requestId,
                signedTransactions: buffers
            };
            return this.send(request);
        });
        this.resolveSignMessage = ({ requestId, signature }) => __awaiter(this, void 0, void 0, function* () {
            const request = {
                type: ClientMessages_1.ClientMessageTypes.ResolveSignMessage,
                sessionId: this.sessionId,
                requestId,
                signature: Buffer.from(signature).toString('hex')
            };
            return this.send(request);
        });
        this.rejectRequest = (requestId) => __awaiter(this, void 0, void 0, function* () {
            const request = {
                type: ClientMessages_1.ClientMessageTypes.RejectRequest,
                requestId
            };
            return this.send(request);
        });
        this.ws = ws;
        this.sessionId = sessionId;
    }
}
exports.ClientSolana = ClientSolana;
_a = ClientSolana;
ClientSolana.build = ({ sessionId, url }) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        const ws = url ? new isomorphic_ws_1.default(url) : new isomorphic_ws_1.default('wss://ncproxy.nightly.app/client');
        const connection = new ClientSolana(ws, sessionId);
        connection.ws.onopen = () => {
            connection.ws.onmessage = ({ data }) => {
                const response = JSON.parse(data);
                if (response.type === ServerMessage_1.ServerMessageTypes.NewRequestMessage) {
                    connection.emit('newRequest', response.request);
                    return;
                }
                else {
                    connection.events[response.id](response);
                }
            };
            connection.ws.onclose = () => {
                connection.emit('disconnect');
            };
            const id = (0, utils_1.getRandomId)();
            const request = { id, sessionId, type: ClientMessages_1.ClientMessageTypes.GetInfo };
            connection.events[id] = (response) => {
                if (response.type === ServerMessage_1.ServerMessageTypes.AppData) {
                    resolve({ client: connection, data: response });
                }
                else {
                    reject(response);
                }
            };
            connection.ws.send(JSON.stringify(request));
        };
    });
});
