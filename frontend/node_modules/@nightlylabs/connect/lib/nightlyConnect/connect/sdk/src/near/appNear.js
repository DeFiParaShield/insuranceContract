"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppNear = void 0;
const types_1 = require("../../../../../common/types");
const bs58_1 = __importDefault(require("bs58"));
const isomorphic_ws_1 = __importDefault(require("isomorphic-ws"));
const near_api_js_1 = require("near-api-js");
const utils_1 = require("near-api-js/lib/utils");
const AppMessages_1 = require("../types/AppMessages");
const ServerMessage_1 = require("../types/ServerMessage");
const utils_2 = require("../utils");
class AppNear {
    constructor(ws, timeout) {
        this.events = {};
        this.sessionId = '';
        this.send = (message) => __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const id = (0, utils_2.getRandomId)();
                const request = JSON.stringify(Object.assign(Object.assign({}, message), { id: id }));
                // Set up the timeout
                const timer = setTimeout(() => {
                    reject(new Error(`Connection timed out after ${this.timeout} ms`));
                }, this.timeout);
                this.events[id] = (response) => {
                    clearTimeout(timer);
                    if (response.type === ServerMessage_1.ServerMessageTypes.Error) {
                        reject(response.msg);
                    }
                    else {
                        resolve(response);
                    }
                };
                this.ws.send(request);
            });
        });
        this.signTransaction = (transaction) => __awaiter(this, void 0, void 0, function* () {
            const request = {
                transaction: Buffer.from(transaction.encode()).toString('hex'),
                network: types_1.NETWORK.NEAR,
                type: AppMessages_1.AppMessageTypes.SignTransaction
            };
            const response = (yield this.send(request));
            return near_api_js_1.transactions.SignedTransaction.decode(Buffer.from(response.transaction, 'hex'));
        });
        this.signAllTransactions = (txs) => __awaiter(this, void 0, void 0, function* () {
            const request = {
                transactions: txs.map((tx) => Buffer.from(tx.encode()).toString('hex')),
                network: types_1.NETWORK.NEAR,
                type: AppMessages_1.AppMessageTypes.SignAllTransactions
            };
            const response = (yield this.send(request));
            const parsed = response.transactions.map((tx) => near_api_js_1.transactions.SignedTransaction.decode(Buffer.from(tx, 'hex')));
            return parsed;
        });
        this.signMessage = (message) => __awaiter(this, void 0, void 0, function* () {
            const request = {
                message,
                network: types_1.NETWORK.NEAR,
                type: AppMessages_1.AppMessageTypes.SignMessage
            };
            const response = (yield this.send(request));
            return Uint8Array.from(Buffer.from(response.signature, 'hex'));
        });
        this.ws = ws;
        this.timeout = timeout;
    }
}
exports.AppNear = AppNear;
_a = AppNear;
AppNear.build = ({ appMetadata, url, onUserConnect, timeout = 40 * 1000 // 40s default timeout
 }) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        const ws = url ? new isomorphic_ws_1.default(url) : new isomorphic_ws_1.default('wss://ncproxy.nightly.app/app');
        const connection = new AppNear(ws, timeout);
        connection.events[ServerMessage_1.ServerMessageTypes.UserConnected] = (data) => {
            const parsedMeta = JSON.parse(data.metadata);
            const pk = utils_1.PublicKey.fromString(bs58_1.default.encode(Buffer.from(data.publicKey, 'hex')));
            onUserConnect({ accountId: parsedMeta.accountId, publicKey: pk });
        };
        connection.ws.onopen = () => {
            connection.ws.onmessage = ({ data }) => {
                const response = JSON.parse(data);
                connection.events[response.id](response);
            };
            const request = (0, AppMessages_1.createInitAction)(Object.assign(Object.assign({}, appMetadata), { network: types_1.NETWORK.NEAR }));
            // Set up the timeout
            const timer = setTimeout(() => {
                reject(new Error(`Connection timed out after ${connection.timeout} ms`));
            }, timeout);
            connection.events[request.id] = (response) => {
                clearTimeout(timer);
                if (response.type === ServerMessage_1.ServerMessageTypes.InitSuccess) {
                    connection.sessionId = response.sessionId;
                    resolve(connection);
                }
                else {
                    reject();
                }
            };
            connection.ws.send(JSON.stringify(request));
        };
    });
});
