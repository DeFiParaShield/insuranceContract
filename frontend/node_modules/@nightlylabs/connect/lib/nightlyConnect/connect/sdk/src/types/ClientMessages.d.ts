import { Version } from './AppMessages';
export declare enum ClientMessageTypes {
    Connect = "Connect",
    GetInfo = "GetInfo",
    GetPendingRequests = "GetPendingRequests",
    ResolveSignTransaction = "ResolveSignTransaction",
    ResolveSignMessage = "ResolveSignMessage",
    RejectRequest = "RejectRequest"
}
export interface ResolveSignTransactionMessage {
    type: ClientMessageTypes.ResolveSignTransaction;
    sessionId: string;
    requestId: string;
    signedTransactions: string[];
}
export interface ResolveSignMessageMessage {
    type: ClientMessageTypes.ResolveSignMessage;
    sessionId: string;
    requestId: string;
    signature: string;
}
export interface RejectRequestMessage {
    type: ClientMessageTypes.RejectRequest;
    requestId: string;
}
export interface GetPendingRequestsMessage {
    sessionId: string;
    type: ClientMessageTypes.GetPendingRequests;
}
export interface ConnectMessage {
    type: ClientMessageTypes.Connect;
    publicKey: string;
    sessionId: string;
    token?: string;
    metadata?: string;
    version: Version;
}
export interface GetInfoMessage {
    type: ClientMessageTypes.GetInfo;
    id: string;
    sessionId: string;
}
export declare const createConnectMessage: (publicKey: string, sessionId: string, token?: string, metadata?: string) => ConnectMessage;
