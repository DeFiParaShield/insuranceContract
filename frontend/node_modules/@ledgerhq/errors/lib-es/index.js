var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { serializeError, deserializeError, createCustomErrorClass, addCustomErrorDeserializer, } from "./helpers";
export { serializeError, deserializeError, createCustomErrorClass, addCustomErrorDeserializer, };
export var AccountNameRequiredError = createCustomErrorClass("AccountNameRequired");
export var AccountNotSupported = createCustomErrorClass("AccountNotSupported");
export var AmountRequired = createCustomErrorClass("AmountRequired");
export var BluetoothRequired = createCustomErrorClass("BluetoothRequired");
export var BtcUnmatchedApp = createCustomErrorClass("BtcUnmatchedApp");
export var CantOpenDevice = createCustomErrorClass("CantOpenDevice");
export var CashAddrNotSupported = createCustomErrorClass("CashAddrNotSupported");
export var CurrencyNotSupported = createCustomErrorClass("CurrencyNotSupported");
export var DeviceAppVerifyNotSupported = createCustomErrorClass("DeviceAppVerifyNotSupported");
export var DeviceGenuineSocketEarlyClose = createCustomErrorClass("DeviceGenuineSocketEarlyClose");
export var DeviceNotGenuineError = createCustomErrorClass("DeviceNotGenuine");
export var DeviceOnDashboardExpected = createCustomErrorClass("DeviceOnDashboardExpected");
export var DeviceOnDashboardUnexpected = createCustomErrorClass("DeviceOnDashboardUnexpected");
export var DeviceInOSUExpected = createCustomErrorClass("DeviceInOSUExpected");
export var DeviceHalted = createCustomErrorClass("DeviceHalted");
export var DeviceNameInvalid = createCustomErrorClass("DeviceNameInvalid");
export var DeviceSocketFail = createCustomErrorClass("DeviceSocketFail");
export var DeviceSocketNoBulkStatus = createCustomErrorClass("DeviceSocketNoBulkStatus");
export var LockedDeviceError = createCustomErrorClass("LockedDeviceError");
export var DisconnectedDevice = createCustomErrorClass("DisconnectedDevice");
export var DisconnectedDeviceDuringOperation = createCustomErrorClass("DisconnectedDeviceDuringOperation");
export var DeviceExtractOnboardingStateError = createCustomErrorClass("DeviceExtractOnboardingStateError");
export var DeviceOnboardingStatePollingError = createCustomErrorClass("DeviceOnboardingStatePollingError");
export var EnpointConfigError = createCustomErrorClass("EnpointConfig");
export var EthAppPleaseEnableContractData = createCustomErrorClass("EthAppPleaseEnableContractData");
export var FeeEstimationFailed = createCustomErrorClass("FeeEstimationFailed");
export var FirmwareNotRecognized = createCustomErrorClass("FirmwareNotRecognized");
export var HardResetFail = createCustomErrorClass("HardResetFail");
export var InvalidXRPTag = createCustomErrorClass("InvalidXRPTag");
export var InvalidAddress = createCustomErrorClass("InvalidAddress");
export var InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass("InvalidAddressBecauseDestinationIsAlsoSource");
export var LatestMCUInstalledError = createCustomErrorClass("LatestMCUInstalledError");
export var UnknownMCU = createCustomErrorClass("UnknownMCU");
export var LedgerAPIError = createCustomErrorClass("LedgerAPIError");
export var LedgerAPIErrorWithMessage = createCustomErrorClass("LedgerAPIErrorWithMessage");
export var LedgerAPINotAvailable = createCustomErrorClass("LedgerAPINotAvailable");
export var ManagerAppAlreadyInstalledError = createCustomErrorClass("ManagerAppAlreadyInstalled");
export var ManagerAppRelyOnBTCError = createCustomErrorClass("ManagerAppRelyOnBTC");
export var ManagerAppDepInstallRequired = createCustomErrorClass("ManagerAppDepInstallRequired");
export var ManagerAppDepUninstallRequired = createCustomErrorClass("ManagerAppDepUninstallRequired");
export var ManagerDeviceLockedError = createCustomErrorClass("ManagerDeviceLocked");
export var ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass("ManagerFirmwareNotEnoughSpace");
export var ManagerNotEnoughSpaceError = createCustomErrorClass("ManagerNotEnoughSpace");
export var ManagerUninstallBTCDep = createCustomErrorClass("ManagerUninstallBTCDep");
export var NetworkDown = createCustomErrorClass("NetworkDown");
export var NoAddressesFound = createCustomErrorClass("NoAddressesFound");
export var NotEnoughBalance = createCustomErrorClass("NotEnoughBalance");
export var NotEnoughBalanceToDelegate = createCustomErrorClass("NotEnoughBalanceToDelegate");
export var NotEnoughBalanceInParentAccount = createCustomErrorClass("NotEnoughBalanceInParentAccount");
export var NotEnoughSpendableBalance = createCustomErrorClass("NotEnoughSpendableBalance");
export var NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass("NotEnoughBalanceBecauseDestinationNotCreated");
export var NoAccessToCamera = createCustomErrorClass("NoAccessToCamera");
export var NotEnoughGas = createCustomErrorClass("NotEnoughGas");
export var NotSupportedLegacyAddress = createCustomErrorClass("NotSupportedLegacyAddress");
export var GasLessThanEstimate = createCustomErrorClass("GasLessThanEstimate");
export var PriorityFeeTooLow = createCustomErrorClass("PriorityFeeTooLow");
export var PriorityFeeTooHigh = createCustomErrorClass("PriorityFeeTooHigh");
export var PriorityFeeHigherThanMaxFee = createCustomErrorClass("PriorityFeeHigherThanMaxFee");
export var MaxFeeTooLow = createCustomErrorClass("MaxFeeTooLow");
export var PasswordsDontMatchError = createCustomErrorClass("PasswordsDontMatch");
export var PasswordIncorrectError = createCustomErrorClass("PasswordIncorrect");
export var RecommendSubAccountsToEmpty = createCustomErrorClass("RecommendSubAccountsToEmpty");
export var RecommendUndelegation = createCustomErrorClass("RecommendUndelegation");
export var TimeoutTagged = createCustomErrorClass("TimeoutTagged");
export var UnexpectedBootloader = createCustomErrorClass("UnexpectedBootloader");
export var MCUNotGenuineToDashboard = createCustomErrorClass("MCUNotGenuineToDashboard");
export var RecipientRequired = createCustomErrorClass("RecipientRequired");
export var UnavailableTezosOriginatedAccountReceive = createCustomErrorClass("UnavailableTezosOriginatedAccountReceive");
export var UnavailableTezosOriginatedAccountSend = createCustomErrorClass("UnavailableTezosOriginatedAccountSend");
export var UpdateFetchFileFail = createCustomErrorClass("UpdateFetchFileFail");
export var UpdateIncorrectHash = createCustomErrorClass("UpdateIncorrectHash");
export var UpdateIncorrectSig = createCustomErrorClass("UpdateIncorrectSig");
export var UpdateYourApp = createCustomErrorClass("UpdateYourApp");
export var UserRefusedDeviceNameChange = createCustomErrorClass("UserRefusedDeviceNameChange");
export var UserRefusedAddress = createCustomErrorClass("UserRefusedAddress");
export var UserRefusedFirmwareUpdate = createCustomErrorClass("UserRefusedFirmwareUpdate");
export var UserRefusedAllowManager = createCustomErrorClass("UserRefusedAllowManager");
export var UserRefusedOnDevice = createCustomErrorClass("UserRefusedOnDevice"); // TODO rename because it's just for transaction refusal
export var TransportOpenUserCancelled = createCustomErrorClass("TransportOpenUserCancelled");
export var TransportInterfaceNotAvailable = createCustomErrorClass("TransportInterfaceNotAvailable");
export var TransportRaceCondition = createCustomErrorClass("TransportRaceCondition");
export var TransportWebUSBGestureRequired = createCustomErrorClass("TransportWebUSBGestureRequired");
export var DeviceShouldStayInApp = createCustomErrorClass("DeviceShouldStayInApp");
export var WebsocketConnectionError = createCustomErrorClass("WebsocketConnectionError");
export var WebsocketConnectionFailed = createCustomErrorClass("WebsocketConnectionFailed");
export var WrongDeviceForAccount = createCustomErrorClass("WrongDeviceForAccount");
export var WrongAppForCurrency = createCustomErrorClass("WrongAppForCurrency");
export var ETHAddressNonEIP = createCustomErrorClass("ETHAddressNonEIP");
export var CantScanQRCode = createCustomErrorClass("CantScanQRCode");
export var FeeNotLoaded = createCustomErrorClass("FeeNotLoaded");
export var FeeRequired = createCustomErrorClass("FeeRequired");
export var FeeTooHigh = createCustomErrorClass("FeeTooHigh");
export var DustLimit = createCustomErrorClass("DustLimit");
export var PendingOperation = createCustomErrorClass("PendingOperation");
export var SyncError = createCustomErrorClass("SyncError");
export var PairingFailed = createCustomErrorClass("PairingFailed");
export var GenuineCheckFailed = createCustomErrorClass("GenuineCheckFailed");
export var LedgerAPI4xx = createCustomErrorClass("LedgerAPI4xx");
export var LedgerAPI5xx = createCustomErrorClass("LedgerAPI5xx");
export var FirmwareOrAppUpdateRequired = createCustomErrorClass("FirmwareOrAppUpdateRequired");
export var LanguageNotFound = createCustomErrorClass("LanguageNotFound");
// db stuff, no need to translate
export var NoDBPathGiven = createCustomErrorClass("NoDBPathGiven");
export var DBWrongPassword = createCustomErrorClass("DBWrongPassword");
export var DBNotReset = createCustomErrorClass("DBNotReset");
/**
 * Type of a Transport error used to represent all equivalent errors coming from all possible implementation of Transport
 */
export var HwTransportErrorType;
(function (HwTransportErrorType) {
    HwTransportErrorType[HwTransportErrorType["Unknown"] = 0] = "Unknown";
    HwTransportErrorType[HwTransportErrorType["BleLocationServicesDisabled"] = 1] = "BleLocationServicesDisabled";
    HwTransportErrorType[HwTransportErrorType["BleBluetoothUnauthorized"] = 2] = "BleBluetoothUnauthorized";
    HwTransportErrorType[HwTransportErrorType["BleScanStartFailed"] = 3] = "BleScanStartFailed";
})(HwTransportErrorType || (HwTransportErrorType = {}));
/**
 * Represents an error coming from any Transport implementation.
 *
 * Needed to map a specific implementation error into an error that
 * can be managed by any code unaware of the specific Transport implementation
 * that was used.
 */
var HwTransportError = /** @class */ (function (_super) {
    __extends(HwTransportError, _super);
    function HwTransportError(type, message) {
        var _this = _super.call(this, message) || this;
        _this.name = "HwTransportError";
        _this.type = type;
        // Needed as long as we target < ES6
        Object.setPrototypeOf(_this, HwTransportError.prototype);
        return _this;
    }
    return HwTransportError;
}(Error));
export { HwTransportError };
/**
 * TransportError is used for any generic transport errors.
 * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.
 */
var TransportError = /** @class */ (function (_super) {
    __extends(TransportError, _super);
    function TransportError(message, id) {
        var _this = this;
        var name = "TransportError";
        _this = _super.call(this, message || name) || this;
        _this.name = name;
        _this.message = message;
        _this.stack = new Error().stack;
        _this.id = id;
        return _this;
    }
    return TransportError;
}(Error));
export { TransportError };
addCustomErrorDeserializer("TransportError", function (e) { return new TransportError(e.message, e.id); });
export var StatusCodes = {
    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,
    ALGORITHM_NOT_SUPPORTED: 0x9484,
    CLA_NOT_SUPPORTED: 0x6e00,
    CODE_BLOCKED: 0x9840,
    CODE_NOT_INITIALIZED: 0x9802,
    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,
    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,
    CONTRADICTION_INVALIDATION: 0x9810,
    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,
    CUSTOM_IMAGE_BOOTLOADER: 0x662f,
    CUSTOM_IMAGE_EMPTY: 0x662e,
    FILE_ALREADY_EXISTS: 0x6a89,
    FILE_NOT_FOUND: 0x9404,
    GP_AUTH_FAILED: 0x6300,
    HALTED: 0x6faa,
    INCONSISTENT_FILE: 0x9408,
    INCORRECT_DATA: 0x6a80,
    INCORRECT_LENGTH: 0x6700,
    INCORRECT_P1_P2: 0x6b00,
    INS_NOT_SUPPORTED: 0x6d00,
    INVALID_KCV: 0x9485,
    INVALID_OFFSET: 0x9402,
    LICENSING: 0x6f42,
    LOCKED_DEVICE: 0x5515,
    MAX_VALUE_REACHED: 0x9850,
    MEMORY_PROBLEM: 0x9240,
    MISSING_CRITICAL_PARAMETER: 0x6800,
    NO_EF_SELECTED: 0x9400,
    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,
    OK: 0x9000,
    PIN_REMAINING_ATTEMPTS: 0x63c0,
    REFERENCED_DATA_NOT_FOUND: 0x6a88,
    SECURITY_STATUS_NOT_SATISFIED: 0x6982,
    TECHNICAL_PROBLEM: 0x6f00,
    UNKNOWN_APDU: 0x6d02,
    USER_REFUSED_ON_DEVICE: 0x5501
};
export function getAltStatusMessage(code) {
    switch (code) {
        // improve text of most common errors
        case 0x6700:
            return "Incorrect length";
        case 0x6800:
            return "Missing critical parameter";
        case 0x6982:
            return "Security not satisfied (dongle locked or have invalid access rights)";
        case 0x6985:
            return "Condition of use not satisfied (denied by the user?)";
        case 0x6a80:
            return "Invalid data received";
        case 0x6b00:
            return "Invalid parameter received";
        case 0x5515:
            return "Locked device";
    }
    if (0x6f00 <= code && code <= 0x6fff) {
        return "Internal error, please report";
    }
}
/**
 * Error thrown when a device returned a non success status.
 * the error.statusCode is one of the `StatusCodes` exported by this library.
 */
export function TransportStatusError(statusCode) {
    var statusText = Object.keys(StatusCodes).find(function (k) { return StatusCodes[k] === statusCode; }) ||
        "UNKNOWN_ERROR";
    var smsg = getAltStatusMessage(statusCode) || statusText;
    var statusCodeStr = statusCode.toString(16);
    var message = "Ledger device: ".concat(smsg, " (0x").concat(statusCodeStr, ")");
    // Maps to a LockedDeviceError
    if (statusCode === StatusCodes.LOCKED_DEVICE) {
        throw new LockedDeviceError(message);
    }
    this.name = "TransportStatusError";
    this.message = message;
    this.stack = new Error().stack;
    this.statusCode = statusCode;
    this.statusText = statusText;
}
TransportStatusError.prototype = new Error();
addCustomErrorDeserializer("TransportStatusError", function (e) { return new TransportStatusError(e.statusCode); });
//# sourceMappingURL=index.js.map