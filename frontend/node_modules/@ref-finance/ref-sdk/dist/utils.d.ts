import { Pool, PoolRPCView, StablePool, SmartRoutingInputPool, Transaction, EstimateSwapView } from './types';
import BN from 'bn.js';
import * as math from 'mathjs';
import Big from 'big.js';
import { SignAndSendTransactionsParams } from '@near-wallet-selector/core/lib/wallet';
import { TokenMetadata } from './types';
export declare const parsePool: (pool: PoolRPCView, id?: number | undefined) => Pool;
export declare const poolFormatter: (pool: Pool) => SmartRoutingInputPool;
export declare const isStablePoolToken: (stablePools: StablePool[], tokenId: string | Number) => boolean;
export declare const isStablePool: (stablePools: StablePool[], poolId: string | number) => boolean;
export declare const getStablePoolDecimal: (stablePool: StablePool) => 18 | 24;
export declare const round: (decimals: number, minAmountOut: string) => string;
export declare const convertToPercentDecimal: (percent: number) => number;
export declare const percentOf: (percent: number, num: number | string) => any;
export declare const percentLess: (percent: number, num: number | string) => string;
export declare const getGas: (gas: string | undefined) => BN;
export declare const getAmount: (amount: string) => BN;
export declare const ONLY_ZEROS: RegExp;
export declare const toReadableNumber: (decimals: number, number?: string) => string;
export declare const toNonDivisibleNumber: (decimals: number, number: string) => string;
export declare const scientificNotationToString: (strParam: string) => string;
export declare const formatWithCommas: (value: string) => string;
export declare const toPrecision: (number: string, precision: number, withCommas?: boolean, atLeastOne?: boolean) => string;
export declare const transformTransactions: (transactions: Transaction[], AccountId: string) => {
    signerId: string;
    receiverId: string;
    actions: {
        type: string;
        params: {
            methodName: string;
            args: object;
            gas: string;
            deposit: string;
        };
    }[];
}[];
export declare const WalletSelectorTransactions: (transactions: Transaction[], AccountId: string) => SignAndSendTransactionsParams;
export declare const separateRoutes: (actions: EstimateSwapView[], outputToken: string) => EstimateSwapView[][];
export declare const calculateExchangeRate: (from: string, to: string, precision?: number | undefined) => string;
export declare const getAvgFee: (estimates: EstimateSwapView[], outputToken: string, parsedAmountIn: string) => number;
export declare const getAccountName: (AccountId: string) => string;
export declare const symbolsArr: string[];
export declare const multiply: (factor1: string, factor2: string) => string;
export declare const toInternationalCurrencySystemLongString: (labelValue: string, percent?: number | undefined) => string;
export declare const percentOfBigNumber: (percent: number, num: number | string, precision: number) => string;
export declare const toRealSymbol: (symbol: string) => string;
export declare const calculateFeeCharge: (fee: number, total: string) => number | number[] | number[][] | math.Matrix | math.Fraction | math.BigNumber | math.Complex;
export declare const calculateFeePercent: (fee: number) => number;
export declare function getExpectedOutputFromSwapTodos(estimates: EstimateSwapView[], outputToken: string): Big;
export declare const calculateAmountReceived: (pool: Pool, amountIn: string, tokenIn: TokenMetadata, tokenOut: TokenMetadata) => import("decimal.js").default;
export declare const calculateMarketPrice: (pool: Pool, tokenIn: TokenMetadata, tokenOut: TokenMetadata) => any;
export declare const calculateSmartRoutingPriceImpact: (tokenInAmount: string, swapTodos: EstimateSwapView[], tokenIn: TokenMetadata, tokenMid: TokenMetadata, tokenOut: TokenMetadata, stablePools: StablePool[]) => string;
export declare const percent: (numerator: string, denominator: string) => any;
export declare const calcStableSwapPriceImpact: (from: string, to: string, marketPrice?: string) => string;
export declare const calculatePriceImpact: (pools: Pool[], tokenIn: TokenMetadata, tokenOut: TokenMetadata, tokenInAmount: string) => string;
export declare function calculateSmartRoutesV2PriceImpact(actions: any, outputToken: string, tokenInPara: TokenMetadata, stablePools: StablePool[]): string;
export declare const getPriceImpact: ({ estimates, tokenIn, tokenOut, amountIn, amountOut, stablePools, }: {
    estimates: EstimateSwapView[];
    tokenIn: TokenMetadata;
    tokenOut: TokenMetadata;
    amountIn: string;
    amountOut: string;
    stablePools: StablePool[];
}) => string;
export declare const subtraction: (initialValue: string, toBeSubtract: string) => string;
export declare function getPoolAllocationPercents(pools: Pool[]): string[];
export declare const isMobile: () => boolean;
export declare function divide(numerator: string, denominator: string): string;
export declare const getMax: (id: string, amount: string) => string;
export declare function getPointByPrice(pointDelta: number, price: string, decimalRate: number, noNeedSlot?: boolean): number;
export declare const feeToPointDelta: (fee: number) => 1 | 8 | 40 | 200;
export declare const priceToPoint: ({ tokenA, tokenB, amountA, amountB, fee, }: {
    tokenA: TokenMetadata;
    tokenB: TokenMetadata;
    amountA: string;
    amountB: string;
    fee: number;
}) => number;
export declare const pointToPrice: ({ tokenA, tokenB, point, }: {
    tokenA: TokenMetadata;
    tokenB: TokenMetadata;
    point: number;
}) => string;
export declare const registerAccountOnToken: (AccountId: string) => {
    methodName: string;
    args: {
        registration_only: boolean;
        account_id: string;
    };
    gas: string;
    amount: string;
};
