'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var isMobile = require('is-mobile');
var core = require('@near-wallet-selector/core');
var walletUtils = require('@near-wallet-selector/wallet-utils');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const isInstalled = () => {
  return core.waitFor(() => !!window.nearWalletApi).catch(() => false);
};

const setupMathWalletState = () => {
  const wallet = window.nearWalletApi;
  return {
    wallet
  };
};

const MathWallet = ({
  options,
  store,
  provider,
  logger
}) => __awaiter(void 0, void 0, void 0, function* () {
  const _state = setupMathWalletState();

  const getAccounts = () => {
    const account = _state.wallet.signer.account;

    if (!account) {
      return [];
    }

    return [{
      accountId: account.accountId
    }];
  };

  const transformTransactions = transactions => {
    const {
      contract
    } = store.getState();

    if (!contract) {
      throw new Error("Wallet not signed in");
    }

    const account = core.getActiveAccount(store.getState());

    if (!account) {
      throw new Error("No active account");
    }

    return transactions.map(transaction => {
      return {
        signerId: transaction.signerId || account.accountId,
        receiverId: transaction.receiverId || contract.contractId,
        actions: transaction.actions
      };
    });
  };

  return {
    signIn({
      contractId
    }) {
      return __awaiter(this, void 0, void 0, function* () {
        const existingAccounts = getAccounts();

        if (existingAccounts.length) {
          return existingAccounts;
        }

        yield _state.wallet.login({
          contractId
        });
        return getAccounts();
      });
    },

    signOut() {
      return __awaiter(this, void 0, void 0, function* () {
        // Ignore if unsuccessful (returns false).
        yield _state.wallet.logout();
      });
    },

    getAccounts() {
      return __awaiter(this, void 0, void 0, function* () {
        return getAccounts();
      });
    },

    signAndSendTransaction({
      signerId,
      receiverId,
      actions
    }) {
      return __awaiter(this, void 0, void 0, function* () {
        logger.log("signAndSendTransaction", {
          signerId,
          receiverId,
          actions
        });
        const signedTransactions = yield walletUtils.signTransactions(transformTransactions([{
          signerId,
          receiverId,
          actions
        }]), _state.wallet.signer, options.network);
        return provider.sendTransaction(signedTransactions[0]);
      });
    },

    signAndSendTransactions({
      transactions
    }) {
      return __awaiter(this, void 0, void 0, function* () {
        logger.log("signAndSendTransactions", {
          transactions
        });
        const signedTransactions = yield walletUtils.signTransactions(transformTransactions(transactions), _state.wallet.signer, options.network);
        logger.log("signAndSendTransactions:signedTransactions", signedTransactions);
        const results = [];

        for (let i = 0; i < signedTransactions.length; i++) {
          results.push(yield provider.sendTransaction(signedTransactions[i]));
        }

        return results;
      });
    }

  };
});

const setupMathWallet = ({
  iconUrl: _iconUrl = "./assets/math-wallet-icon.png"
} = {}) => {
  return () => __awaiter(void 0, void 0, void 0, function* () {
    const mobile = isMobile.isMobile();
    const installed = yield isInstalled();

    if (mobile) {
      return null;
    }

    return {
      id: "math-wallet",
      type: "injected",
      metadata: {
        name: "Math Wallet",
        description: null,
        iconUrl: _iconUrl,
        downloadUrl: "https://chrome.google.com/webstore/detail/math-wallet/afbcbjpbpfadlkmhmclhkeeodmamcflc",
        deprecated: false,
        available: installed
      },
      init: MathWallet
    };
  });
};

exports.setupMathWallet = setupMathWallet;
